s2<- 0.025 ## "true" variance
mp<-mu.post(Ybar=m, mu0=mu0, sig20=s20, sig2=s2, n=n)
# Load data
WL.data <- read.csv("MidgeWingLength.csv")
Y <- WL.data$WingLength
n <- length(Y)
hist(Y,breaks=10,xlab="Wing Length (mm)")
m<-sum(Y)/n
s2<-sum((Y-m)^2)/(n-1)
tau.post<-function(tau, tau0, n){n*tau + tau0}
mu.post<-function(Ybar, mu0, sig20, sig2, n){
weight<-sig2+n*sig20
return(n*sig20*Ybar/weight + sig2*mu0/weight)
}
mu0 <- 1.9
s20 <- 0.8
s2<- 0.025 ## "true" variance
mp<-mu.post(Ybar=m, mu0=mu0, sig20=s20, sig2=s2, n=n)
tp<-tau.post(tau=1/s2, tau0=1/s20, n=n)
x<-seq(1.3,2.3, length=1000)
hist(Y,breaks=10,xlab="Wing Length (mm)", xlim=c(1.3, 2.3),
freq=FALSE, ylim=c(0,8))
lines(x, dnorm(x, mean=mu0, sd=sqrt(s20)), col=2, lty=2, lwd=2) ## prior
lines(x, dnorm(x, mean=mp, sd=sqrt(1/tp)), col=4, lwd=2) ## posterior
legend("topleft", legend=c("prior", "posterior"), col=c(2,4), lty=c(2,1), lwd=2)
# Load libraries
require(nimble)
require(HDInterval)
library(MCMCvis)
require(coda) # makes diagnostic plots
require(IDPmisc) # makes nice colored pairs plots to look at joint posteriors
##require(mcmcplots) # another option for diagnostic plots, currently unused
# Load libraries
require(nimble)
require(HDInterval)
library(MCMCvis)
require(coda) # makes diagnostic plots
require(IDPmisc) # makes nice colored pairs plots to look at joint posteriors
require("matrixStats")
require("truncnorm")
##require(mcmcplots) # another option for diagnostic plots, currently unused
# install.packages("devtools")
devtools::install_github("johnwilliamsmithjr/bayesTPC")
library(bayesTPC)
set.seed(1234)
Aaeg.data <- read.csv("AeaegyptiTraitData.csv")
head(Aaeg.data)
mu.data <- subset(Aaeg.data, trait.name == "mu")
lf.data <- subset(Aaeg.data, trait.name == "1/mu")
par(mfrow=c(1,2), bty="l")
plot(trait ~ Temp, data = mu.data, ylab="mu")
plot(trait ~ Temp, data = lf.data, ylab="1/mu")
mu.data.inv <- mu.data # make a copy of the mu data
mu.data.inv$trait <- 1/mu.data$trait # take the inverse of the trait values to convert mu to lifespan
lf.data.comb <- rbind(mu.data.inv, lf.data) # combine both lifespan data sets together
par(mfrow=c(1,1), bty="l")
plot(trait ~ Temp, data = lf.data.comb, ylab="1/mu",
ylim=c(0,40))
get_models()
get_formula("quadratic")
get_default_priors("quadratic")
lf.data.bTPC<-list(Trait = lf.data.comb$trait, Temp=lf.data.comb$Temp)
AedTestFit<- b_TPC(data = lf.data.bTPC, model = 'quadratic')
detach("package:base", unload = TRUE)
library(base)
AedTestFit<- b_TPC(data = lf.data.bTPC, model = 'quadratic')
names(AedTestFit)
dim(AedTestFit$samples) # number of samples then number of params
head(AedTestFit$samples) # show first few sets of samples
AedTestFit$model_type
AedTestFit$priors
summary(AedTestFit$samples)
par(mfrow=c(2,2))
traceplot(AedTestFit)
s1<-as.data.frame(AedTestFit$samples)
par(mfrow=c(2,2))
for(i in 1:4) {
acf(s1[,i], lag.max=50, main="",
ylab = paste("ACF: ", names(s1)[i], sep=""))
}
ppo_plot(AedTestFit)
bayesTPC_ipairs(AedTestFit)
AedQuadFit <- b_TPC(data = lf.data.bTPC, ## data
model = 'quadratic', ## model to fit
niter = 11000, ## total iterations
burn = 1000, ## number of burn in samples
samplerType = 'AF_slice', ## slice sampler
priors = list(q = 'dunif(0, .5)',
sigma.sq = 'dexp(1)') ## priors
)
summary(AedQuadFit$samples)
## plot(lf.fit.mcmc[,c(1,3,4)]) ## default coda plot
par(mfrow=c(2,2))
traceplot(AedQuadFit)
my_briere_formula <- expression(q * (Temp - T_min) * ((T_max > Temp) * abs(T_max - Temp))^(1/3) * (T_max > Temp) * (Temp > T_min))
my_briere_priors <- c(
q = "dunif(0,1)",
T_max = "dunif(20,45)",
T_min = "dunif(-5,10)")
my_briere <- specify_normal_model("my_briere", #model name
parameters = my_briere_priors, #names are parameters, values are priors
formula = my_briere_formula
)
get_formula("my_briere")
get_default_priors("my_briere")
cat(configure_model(my_briere))
AedMyBriFit <- b_TPC(data = lf.data.bTPC, ## data
model = 'my_briere', ## model to fit
niter = 11000, ## total iterations
burn = 1000, ## number of burn in samples
samplerType = 'AF_slice', ## slice sampler
priors = list(sigma.sq = 'dexp(1)') ## priors
)
par(mfrow=c(2,2))
traceplot(AedMyBriFit, burn=1000)
s3<-as.data.frame(AedMyBriFit$samples[1000:10000,])
par(mfrow=c(2,2))
for(i in 1:4) {
acf(s3[,i], lag.max=50, main="",
ylab = paste("ACF: ", names(s3)[i], sep=""))
}
ppo_plot(AedMyBriFit)
bayesTPC_ipairs(AedMyBriFit, burn = 1000)
AedTestFit$mcmc$getWAIC()
AedQuadFit$mcmc$getWAIC()
AedBriFit$mcmc$getWAIC()
AedTestFit$mcmc$getWAIC()
AedQuadFit$mcmc$getWAIC()
#AedBriFit$mcmc$getWAIC()
AedMyBriFit$mcmc$getWAIC()
library(tidyverse)
briere_fit <- as_tibble(bayesTPC_summary(AedMyBriFit, plot = F))
summary(AedMyBriFit, plot = F)
library(tidyverse)
briere_fit <- as_tibble(summary(AedMyBriFit, plot = F))
head(briere_fit)
ggplot(briere_fit)+
geom_line(aes(Temp_interval, Medians))+
theme_bw()+
geom_ribbon(aes(Temp_interval, ymin=Lower_bounds, ymax=Upper_bounds), fill="#30694B",alpha=0.5,
inherit.aes = T)+
geom_point(aes(Temp, trait), lf.data.comb, shape=21, fill='#C0C0C0',
col='#000000', alpha=0.8, stroke=0.5, size=2)+
theme(text = element_text(size=12))+
scale_y_continuous(expression(plain(paste("lifespan (days)"))))+
labs(x=expression(plain(paste(" Temperature, ",degree,"C"))))+
theme(legend.position = 'none',
axis.title.y = element_text(size=12), axis.title.x = element_text(size=12),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
briere_fit
lf.data.comb
ggplot(briere_fit)+
geom_line(aes(temp_interval, Medians))+
theme_bw()+
geom_ribbon(aes(temp_interval, ymin=Lower_bounds, ymax=Upper_bounds), fill="#30694B",alpha=0.5,
inherit.aes = T)+
geom_point(aes(Temp, trait), lf.data.comb, shape=21, fill='#C0C0C0',
col='#000000', alpha=0.8, stroke=0.5, size=2)+
theme(text = element_text(size=12))+
scale_y_continuous(expression(plain(paste("lifespan (days)"))))+
labs(x=expression(plain(paste(" Temperature, ",degree,"C"))))+
theme(legend.position = 'none',
axis.title.y = element_text(size=12), axis.title.x = element_text(size=12),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggplot(briere_fit)+
geom_line(aes(temp_interval, medians))+
theme_bw()+
geom_ribbon(aes(temp_interval, ymin=Lower_bounds, ymax=Upper_bounds), fill="#30694B",alpha=0.5,
inherit.aes = T)+
geom_point(aes(Temp, trait), lf.data.comb, shape=21, fill='#C0C0C0',
col='#000000', alpha=0.8, stroke=0.5, size=2)+
theme(text = element_text(size=12))+
scale_y_continuous(expression(plain(paste("lifespan (days)"))))+
labs(x=expression(plain(paste(" Temperature, ",degree,"C"))))+
theme(legend.position = 'none',
axis.title.y = element_text(size=12), axis.title.x = element_text(size=12),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
briere_fit
briere_fit
ggplot(briere_fit)+
geom_line(aes(temp_interval, medians))+
theme_bw()+
geom_ribbon(aes(temp_interval, ymin=lower_bounds, ymax=upper_bounds), fill="#30694B",alpha=0.5,
inherit.aes = T)+
geom_point(aes(Temp, trait), lf.data.comb, shape=21, fill='#C0C0C0',
col='#000000', alpha=0.8, stroke=0.5, size=2)+
theme(text = element_text(size=12))+
scale_y_continuous(expression(plain(paste("lifespan (days)"))))+
labs(x=expression(plain(paste(" Temperature, ",degree,"C"))))+
theme(legend.position = 'none',
axis.title.y = element_text(size=12), axis.title.x = element_text(size=12),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
posteriorPredTPC(AedMyBriFit)
posterior_predictive(AedMyBriFit)
lifespan_Tpk <- briere_fit %>% slice(which.max(medians))
ggplot(briere_fit)+
geom_line(aes(temp_interval, medians), size=0.4)+
theme_bw()+
geom_ribbon(aes(temp_interval, ymin=lower_bounds, ymax=upper_bounds), fill="#30694B",alpha=0.5,
inherit.aes = T)+
geom_point(aes(Temp, trait), lf.data.comb, shape=21, fill='#C0C0C0',
col='#000000', alpha=0.8, stroke=0.5, size=2)+
geom_point(aes(Temp_interval, medians), lifespan_Tpk, shape=23, fill='yellow',
col='#000000', alpha=0.8, stroke=0.5, size=3)+
theme(text = element_text(size=12))+
scale_y_continuous(expression(plain(paste("lifespan (days)"))))+
labs(x=expression(plain(paste(" Temperature, ",degree,"C"))))+
theme(legend.position = 'none',
axis.title.y = element_text(size=12), axis.title.x = element_text(size=12),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggplot(briere_fit)+
geom_line(aes(temp_interval, medians), size=0.4)+
theme_bw()+
geom_ribbon(aes(temp_interval, ymin=lower_bounds, ymax=upper_bounds), fill="#30694B",alpha=0.5,
inherit.aes = T)+
geom_point(aes(Temp, trait), lf.data.comb, shape=21, fill='#C0C0C0',
col='#000000', alpha=0.8, stroke=0.5, size=2)+
geom_point(aes(temp_interval, medians), lifespan_Tpk, shape=23, fill='yellow',
col='#000000', alpha=0.8, stroke=0.5, size=3)+
theme(text = element_text(size=12))+
scale_y_continuous(expression(plain(paste("lifespan (days)"))))+
labs(x=expression(plain(paste(" Temperature, ",degree,"C"))))+
theme(legend.position = 'none',
axis.title.y = element_text(size=12), axis.title.x = element_text(size=12),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
# Load libraries
require(nimble)
require(HDInterval)
library(MCMCvis)
require(coda) # makes diagnostic plots
require(IDPmisc) # makes nice colored pairs plots to look at joint posteriors
require("matrixStats")
require("truncnorm")
##require(mcmcplots) # another option for diagnostic plots, currently unused
# install.packages("devtools")
devtools::install_github("johnwilliamsmithjr/bayesTPC")
library(bayesTPC)
set.seed(1234)
Aaeg.data <- read.csv("AeaegyptiTraitData.csv")
head(Aaeg.data)
mu.data <- subset(Aaeg.data, trait.name == "mu")
lf.data <- subset(Aaeg.data, trait.name == "1/mu")
par(mfrow=c(1,2), bty="l")
plot(trait ~ Temp, data = mu.data, ylab="mu")
plot(trait ~ Temp, data = lf.data, ylab="1/mu")
mu.data.inv <- mu.data # make a copy of the mu data
mu.data.inv$trait <- 1/mu.data$trait # take the inverse of the trait values to convert mu to lifespan
lf.data.comb <- rbind(mu.data.inv, lf.data) # combine both lifespan data sets together
par(mfrow=c(1,1), bty="l")
plot(trait ~ Temp, data = lf.data.comb, ylab="1/mu",
ylim=c(0,40))
get_models()
get_formula("quadratic")
get_default_priors("quadratic")
lf.data.bTPC<-list(Trait = lf.data.comb$trait, Temp=lf.data.comb$Temp)
AedTestFit<- b_TPC(data = lf.data.bTPC, model = 'quadratic')
names(AedTestFit)
dim(AedTestFit$samples) # number of samples then number of params
head(AedTestFit$samples) # show first few sets of samples
AedTestFit$model_type
AedTestFit$priors
summary(AedTestFit$samples)
par(mfrow=c(2,2))
traceplot(AedTestFit)
s1<-as.data.frame(AedTestFit$samples)
par(mfrow=c(2,2))
for(i in 1:4) {
acf(s1[,i], lag.max=50, main="",
ylab = paste("ACF: ", names(s1)[i], sep=""))
}
ppo_plot(AedTestFit)
bayesTPC_ipairs(AedTestFit)
AedQuadFit <- b_TPC(data = lf.data.bTPC, ## data
model = 'quadratic', ## model to fit
niter = 11000, ## total iterations
burn = 1000, ## number of burn in samples
samplerType = 'AF_slice', ## slice sampler
priors = list(q = 'dunif(0, .5)',
sigma.sq = 'dexp(1)') ## priors
)
summary(AedQuadFit$samples)
## plot(lf.fit.mcmc[,c(1,3,4)]) ## default coda plot
par(mfrow=c(2,2))
traceplot(AedQuadFit)
s1<-as.data.frame(AedQuadFit$samples)
par(mfrow=c(2,2))
for(i in 1:4) acf(s1[,i], lag.max=50, main="", ylab = paste("ACF: ", names(s1)[i], sep=""))
ppo_plot(AedQuadFit, burn = 1000)
AedBriFit <- b_TPC(data = lf.data.bTPC, ## data
model = 'briere', ## model to fit
niter = 11000, ## total iterations
burn = 1000, ## number of burn in samples
samplerType = 'AF_slice', ## slice sampler
priors = list(T_min = "dunif(5,10)",
T_max = "dunif(18,35)",
sigma.sq = 'dexp(1)') ## priors
)
summary(AedBriFit$samples)
## plot(lf.fit.mcmc[,c(1,3,4)]) ## default coda plot
par(mfrow=c(2,2))
traceplot(AedBriFit, burn=1000)
s2<-as.data.frame(AedBriFit$samples[1000:10000,])
par(mfrow=c(2,2))
for(i in 1:4) {
acf(s2[,i], lag.max=50, main="",
ylab = paste("ACF: ", names(s2)[i], sep=""))
}
ppo_plot(AedBriFit, burn = 1000)
bayesTPC_ipairs(AedBriFit, burn=1000)
get_default_model_specification("briere")
my_briere_formula <- expression(q * (Temp - T_min) * ((T_max > Temp) * abs(T_max - Temp))^(1/3) * (T_max > Temp) * (Temp > T_min))
my_briere_priors <- c(
q = "dunif(0,1)",
T_max = "dunif(20,45)",
T_min = "dunif(-5,10)")
my_briere <- specify_normal_model("my_briere", #model name
parameters = my_briere_priors, #names are parameters, values are priors
formula = my_briere_formula
)
my_briere <- specify_normal_model("my_briere", #model name
parameters = my_briere_priors, #names are parameters, values are priors
formula = my_briere_formula
)
# Load libraries
library(nimble)
library(HDInterval)
library(MCMCvis)
library(coda) # makes diagnostic plots
library(IDPmisc) # makes nice colored pairs plots to look at joint posteriors
library("matrixStats")
library("truncnorm")
##library(mcmcplots) # another option for diagnostic plots, currently unused
# install.packages("devtools")
devtools::install_github("johnwilliamsmithjr/bayesTPC")
library(bayesTPC)
set.seed(1234)
Aaeg.data <- read.csv("AeaegyptiTraitData.csv")
head(Aaeg.data)
mu.data <- subset(Aaeg.data, trait.name == "mu")
lf.data <- subset(Aaeg.data, trait.name == "1/mu")
par(mfrow=c(1,2), bty="l")
plot(trait ~ Temp, data = mu.data, ylab="mu")
plot(trait ~ Temp, data = lf.data, ylab="1/mu")
mu.data.inv <- mu.data # make a copy of the mu data
mu.data.inv$trait <- 1/mu.data$trait # take the inverse of the trait values to convert mu to lifespan
lf.data.comb <- rbind(mu.data.inv, lf.data) # combine both lifespan data sets together
par(mfrow=c(1,1), bty="l")
plot(trait ~ Temp, data = lf.data.comb, ylab="1/mu",
ylim=c(0,40))
get_models()
get_formula("quadratic")
get_default_priors("quadratic")
lf.data.bTPC<-list(Trait = lf.data.comb$trait, Temp=lf.data.comb$Temp)
AedTestFit<- b_TPC(data = lf.data.bTPC, model = 'quadratic')
names(AedTestFit)
dim(AedTestFit$samples) # number of samples then number of params
head(AedTestFit$samples) # show first few sets of samples
AedTestFit$model_type
AedTestFit$priors
summary(AedTestFit$samples)
par(mfrow=c(2,2))
traceplot(AedTestFit)
s1<-as.data.frame(AedTestFit$samples)
par(mfrow=c(2,2))
for(i in 1:4) {
acf(s1[,i], lag.max=50, main="",
ylab = paste("ACF: ", names(s1)[i], sep=""))
}
ppo_plot(AedTestFit)
bayesTPC_ipairs(AedTestFit)
AedQuadFit <- b_TPC(data = lf.data.bTPC, ## data
model = 'quadratic', ## model to fit
niter = 11000, ## total iterations
burn = 1000, ## number of burn in samples
samplerType = 'AF_slice', ## slice sampler
priors = list(q = 'dunif(0, .5)',
sigma.sq = 'dexp(1)') ## priors
)
summary(AedQuadFit$samples)
## plot(lf.fit.mcmc[,c(1,3,4)]) ## default coda plot
par(mfrow=c(2,2))
traceplot(AedQuadFit)
s1<-as.data.frame(AedQuadFit$samples)
par(mfrow=c(2,2))
for(i in 1:4) acf(s1[,i], lag.max=50, main="", ylab = paste("ACF: ", names(s1)[i], sep=""))
ppo_plot(AedQuadFit, burn = 1000)
AedBriFit <- b_TPC(data = lf.data.bTPC, ## data
model = 'briere', ## model to fit
niter = 11000, ## total iterations
burn = 1000, ## number of burn in samples
samplerType = 'AF_slice', ## slice sampler
priors = list(T_min = "dunif(5,10)",
T_max = "dunif(18,35)",
sigma.sq = 'dexp(1)') ## priors
)
summary(AedBriFit$samples)
## plot(lf.fit.mcmc[,c(1,3,4)]) ## default coda plot
par(mfrow=c(2,2))
traceplot(AedBriFit, burn=1000)
s2<-as.data.frame(AedBriFit$samples[1000:10000,])
par(mfrow=c(2,2))
for(i in 1:4) {
acf(s2[,i], lag.max=50, main="",
ylab = paste("ACF: ", names(s2)[i], sep=""))
}
ppo_plot(AedBriFit, burn = 1000)
bayesTPC_ipairs(AedBriFit, burn=1000)
get_default_model_specification("briere")
my_briere_formula <- expression(q * (Temp - T_min) * ((T_max > Temp) * abs(T_max - Temp))^(1/3) * (T_max > Temp) * (Temp > T_min))
my_briere_priors <- c(
q = "dunif(0,1)",
T_max = "dunif(20,45)",
T_min = "dunif(-5,10)")
my_briere <- specify_normal_model("my_briere", #model name
parameters = my_briere_priors, #names are parameters, values are priors
formula = my_briere_formula
)
get_formula("my_briere")
get_default_priors("my_briere")
cat(configure_model(my_briere))
AedMyBriFit <- b_TPC(data = lf.data.bTPC, ## data
model = 'my_briere', ## model to fit
niter = 11000, ## total iterations
burn = 1000, ## number of burn in samples
samplerType = 'AF_slice', ## slice sampler
priors = list(sigma.sq = 'dexp(1)') ## priors
)
par(mfrow=c(2,2))
traceplot(AedMyBriFit, burn=1000)
s3<-as.data.frame(AedMyBriFit$samples[1000:10000,])
par(mfrow=c(2,2))
for(i in 1:4) {
acf(s3[,i], lag.max=50, main="",
ylab = paste("ACF: ", names(s3)[i], sep=""))
}
ppo_plot(AedMyBriFit)
bayesTPC_ipairs(AedMyBriFit, burn = 1000)
AedTestFit$mcmc$getWAIC()
AedQuadFit$mcmc$getWAIC()
AedBriFit$mcmc$getWAIC()
AedMyBriFit$mcmc$getWAIC()
library(tidyverse)
briere_fit <- as_tibble(summary(AedMyBriFit, plot = F))
head(briere_fit)
ggplot(briere_fit)+
geom_line(aes(temp_interval, medians))+
theme_bw()+
geom_ribbon(aes(temp_interval, ymin=lower_bounds, ymax=upper_bounds), fill="#30694B",alpha=0.5,
inherit.aes = T)+
geom_point(aes(Temp, trait), lf.data.comb, shape=21, fill='#C0C0C0',
col='#000000', alpha=0.8, stroke=0.5, size=2)+
theme(text = element_text(size=12))+
scale_y_continuous(expression(plain(paste("lifespan (days)"))))+
labs(x=expression(plain(paste(" Temperature, ",degree,"C"))))+
theme(legend.position = 'none',
axis.title.y = element_text(size=12), axis.title.x = element_text(size=12),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
posterior_predictive(AedMyBriFit)
lifespan_Tpk <- briere_fit %>% slice(which.max(medians))
ggplot(briere_fit)+
geom_line(aes(temp_interval, medians), size=0.4)+
theme_bw()+
geom_ribbon(aes(temp_interval, ymin=lower_bounds, ymax=upper_bounds), fill="#30694B",alpha=0.5,
inherit.aes = T)+
geom_point(aes(Temp, trait), lf.data.comb, shape=21, fill='#C0C0C0',
col='#000000', alpha=0.8, stroke=0.5, size=2)+
geom_point(aes(temp_interval, medians), lifespan_Tpk, shape=23, fill='yellow',
col='#000000', alpha=0.8, stroke=0.5, size=3)+
theme(text = element_text(size=12))+
scale_y_continuous(expression(plain(paste("lifespan (days)"))))+
labs(x=expression(plain(paste(" Temperature, ",degree,"C"))))+
theme(legend.position = 'none',
axis.title.y = element_text(size=12), axis.title.x = element_text(size=12),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggplot(briere_fit)+
geom_line(aes(temp_interval, medians), linewidth=0.4)+
theme_bw()+
geom_ribbon(aes(temp_interval, ymin=lower_bounds, ymax=upper_bounds), fill="#30694B",alpha=0.5,
inherit.aes = T)+
geom_point(aes(Temp, trait), lf.data.comb, shape=21, fill='#C0C0C0',
col='#000000', alpha=0.8, stroke=0.5, size=2)+
geom_point(aes(temp_interval, medians), lifespan_Tpk, shape=23, fill='yellow',
col='#000000', alpha=0.8, stroke=0.5, size=3)+
theme(text = element_text(size=12))+
scale_y_continuous(expression(plain(paste("lifespan (days)"))))+
labs(x=expression(plain(paste(" Temperature, ",degree,"C"))))+
theme(legend.position = 'none',
axis.title.y = element_text(size=12), axis.title.x = element_text(size=12),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggplot(briere_fit)+
geom_line(aes(temp_interval, medians), linewidth=0.4)+
theme_bw()+
geom_ribbon(aes(temp_interval, ymin=lower_bounds, ymax=upper_bounds), fill="#30694B",alpha=0.5,
inherit.aes = T)+
geom_point(aes(Temp, trait), lf.data.comb, shape=21, fill='#C0C0C0',
col='#000000', alpha=0.8, stroke=0.5, size=2)+
theme(text = element_text(size=12))+
scale_y_continuous(expression(plain(paste("lifespan (days)"))))+
labs(x=expression(plain(paste(" Temperature, ",degree,"C"))))+
theme(legend.position = 'none',
axis.title.y = element_text(size=12), axis.title.x = element_text(size=12),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
